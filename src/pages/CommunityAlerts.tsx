
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { ArrowLeft, AlertTriangle, MapPin, Clock, Users, TrendingUp, Eye, Plus } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { communityService, CommunityAlert } from '@/services/communityService';
import { useLanguage } from '@/contexts/LanguageContext';

const CommunityAlerts = () => {
  const [alerts, setAlerts] = useState<CommunityAlert[]>([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState<'all' | 'urgent' | 'scam' | 'danger'>('all');
  const { toast } = useToast();
  const { language } = useLanguage();

  useEffect(() => {
    loadCommunityAlerts();
    
    // Set up real-time subscription
    const channel = communityService.subscribeToAlerts((newAlert: CommunityAlert) => {
      console.log('New alert received:', newAlert);
      setAlerts(prev => [newAlert, ...prev]);
      toast({
        title: language === 'en' ? "üö® New Alert" : "üö® C·∫£nh B√°o M·ªõi",
        description: language === 'en' ? "New alert from community" : "C√≥ c·∫£nh b√°o m·ªõi t·ª´ c·ªông ƒë·ªìng",
      });
    });

    return () => {
      channel.unsubscribe();
    };
  }, [toast, language]);

  const loadCommunityAlerts = async () => {
    try {
      const data = await communityService.getCommunityAlerts();
      setAlerts(data);
    } catch (error) {
      console.error('Error loading community alerts:', error);
    } finally {
      setLoading(false);
    }
  };

  const getFilteredAlerts = () => {
    switch (filter) {
      case 'urgent':
        return alerts.filter(alert => alert.alert_type === 'urgent_alert' || alert.severity === 'critical');
      case 'scam':
        return alerts.filter(alert => alert.alert_type === 'scam_warning');
      case 'danger':
        return alerts.filter(alert => alert.alert_type === 'danger_zone');
      default:
        return alerts;
    }
  };

  const getSeverityBadgeVariant = (severity: string) => {
    switch (severity) {
      case 'critical': return 'destructive';
      case 'high': return 'destructive';
      case 'medium': return 'secondary';
      case 'low': return 'outline';
      default: return 'outline';
    }
  };

  const getAlertTypeIcon = (type: string) => {
    switch (type) {
      case 'urgent_alert': return 'üö®';
      case 'scam_warning': return '‚ö†Ô∏è';
      case 'danger_zone': return '‚õî';
      case 'safety_tip': return 'üí°';
      default: return 'üì¢';
    }
  };

  const getAlertTypeName = (type: string) => {
    const types = {
      'urgent_alert': language === 'en' ? 'Urgent Alert' : 'C·∫£nh B√°o Kh·∫©n C·∫•p',
      'scam_warning': language === 'en' ? 'Scam Warning' : 'C·∫£nh B√°o L·ª´a ƒê·∫£o',
      'danger_zone': language === 'en' ? 'Danger Zone' : 'Khu V·ª±c Nguy Hi·ªÉm',
      'safety_tip': language === 'en' ? 'Safety Tip' : 'M·∫πo An To√†n'
    };
    return types[type as keyof typeof types] || (language === 'en' ? 'Notification' : 'Th√¥ng B√°o');
  };

  const getSourceTypeName = (type: string) => {
    const sources = {
      'authority': language === 'en' ? 'Authority' : 'C∆° Quan Ch·ª©c NƒÉng',
      'community': language === 'en' ? 'Community' : 'C·ªông ƒê·ªìng',
      'user_report': language === 'en' ? 'User Report' : 'B√°o C√°o Ng∆∞·ªùi D√πng',
      'auto_detected': language === 'en' ? 'Auto Detected' : 'T·ª± ƒê·ªông Ph√°t Hi·ªán'
    };
    return sources[type as keyof typeof sources] || (language === 'en' ? 'Unknown' : 'Kh√¥ng R√µ');
  };

  const getSeverityText = (severity: string) => {
    const severities = {
      'critical': language === 'en' ? 'Extremely Dangerous' : 'C·ª±c K·ª≥ Nguy Hi·ªÉm',
      'high': language === 'en' ? 'High Risk' : 'Nguy Hi·ªÉm Cao',
      'medium': language === 'en' ? 'Medium Risk' : 'Nguy Hi·ªÉm Trung B√¨nh',
      'low': language === 'en' ? 'Low Risk' : 'Nguy Hi·ªÉm Th·∫•p'
    };
    return severities[severity as keyof typeof severities] || severity;
  };

  const formatTimeAgo = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffTime = Math.abs(now.getTime() - date.getTime());
    const diffMinutes = Math.floor(diffTime / (1000 * 60));
    const diffHours = Math.floor(diffTime / (1000 * 60 * 60));
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));

    if (language === 'en') {
      if (diffMinutes < 60) return `${diffMinutes} minutes ago`;
      if (diffHours < 24) return `${diffHours} hours ago`;
      return `${diffDays} days ago`;
    } else {
      if (diffMinutes < 60) return `${diffMinutes} ph√∫t tr∆∞·ªõc`;
      if (diffHours < 24) return `${diffHours} gi·ªù tr∆∞·ªõc`;
      return `${diffDays} ng√†y tr∆∞·ªõc`;
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-cyan-50 p-4">
        <div className="max-w-4xl mx-auto">
          <div className="text-center py-8">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-trust-blue mx-auto"></div>
            <p className="mt-4 text-gray-600">
              {language === 'en' ? 'Loading alerts...' : 'ƒêang t·∫£i c·∫£nh b√°o...'}
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-cyan-50">
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-6xl mx-auto px-4 py-4 flex items-center justify-between">
          <Link to="/">
            <Button variant="ghost" className="text-trust-blue hover:bg-trust-blue/10">
              <ArrowLeft className="w-5 h-5 mr-2" />
              {language === 'en' ? 'Back to Home' : 'V·ªÅ Trang Ch·ªß'}
            </Button>
          </Link>
          <div className="flex items-center space-x-2">
            <AlertTriangle className="w-6 h-6 text-trust-blue" />
            <span className="text-lg font-semibold text-gray-800">
              {language === 'en' ? 'Community Alerts' : 'C·∫£nh B√°o C·ªông ƒê·ªìng'}
            </span>
          </div>
        </div>
      </header>

      <div className="max-w-6xl mx-auto p-4 space-y-6">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            üö® {language === 'en' ? 'Real-time Community Alerts' : 'C·∫£nh B√°o C·ªông ƒê·ªìng Realtime'}
          </h1>
          <p className="text-gray-600">
            {language === 'en' 
              ? 'Latest alerts from community and authorities'
              : 'Th√¥ng tin c·∫£nh b√°o m·ªõi nh·∫•t t·ª´ c·ªông ƒë·ªìng v√† c∆° quan ch·ª©c nƒÉng'
            }
          </p>
        </div>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span>{language === 'en' ? 'Filter Alerts' : 'L·ªçc C·∫£nh B√°o'}</span>
              <div className="flex items-center space-x-2 text-sm text-gray-600">
                <Eye className="w-4 h-4" />
                <span>{getFilteredAlerts().length} {language === 'en' ? 'alerts' : 'c·∫£nh b√°o'}</span>
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-wrap gap-2">
              <Button
                variant={filter === 'all' ? 'default' : 'outline'}
                onClick={() => setFilter('all')}
                className="flex items-center space-x-2"
              >
                <span>{language === 'en' ? 'All' : 'T·∫•t C·∫£'}</span>
              </Button>
              <Button
                variant={filter === 'urgent' ? 'default' : 'outline'}
                onClick={() => setFilter('urgent')}
                className="flex items-center space-x-2"
              >
                <span>üö® {language === 'en' ? 'Urgent' : 'Kh·∫©n C·∫•p'}</span>
              </Button>
              <Button
                variant={filter === 'scam' ? 'default' : 'outline'}
                onClick={() => setFilter('scam')}
                className="flex items-center space-x-2"
              >
                <span>‚ö†Ô∏è {language === 'en' ? 'Scam' : 'L·ª´a ƒê·∫£o'}</span>
              </Button>
              <Button
                variant={filter === 'danger' ? 'default' : 'outline'}
                onClick={() => setFilter('danger')}
                className="flex items-center space-x-2"
              >
                <span>‚õî {language === 'en' ? 'Danger Zone' : 'Khu V·ª±c Nguy Hi·ªÉm'}</span>
              </Button>
            </div>
          </CardContent>
        </Card>

        <div className="space-y-4">
          {getFilteredAlerts().map((alert) => (
            <Card key={alert.id} className={`overflow-hidden ${alert.severity === 'critical' ? 'border-red-300 bg-red-50' : ''}`}>
              <CardHeader className="pb-3">
                <div className="flex items-start justify-between">
                  <div className="flex items-start space-x-3">
                    <div className="text-2xl">{getAlertTypeIcon(alert.alert_type)}</div>
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-1">
                        <h3 className="text-lg font-semibold text-gray-900">{alert.title}</h3>
                        {alert.is_verified && (
                          <Badge variant="outline" className="text-green-600 border-green-600">
                            ‚úì {language === 'en' ? 'Verified' : 'ƒê√£ X√°c Minh'}
                          </Badge>
                        )}
                      </div>
                      <p className="text-gray-600 text-sm mb-2">{alert.description}</p>
                      
                      {alert.location_name && (
                        <div className="flex items-center space-x-1 text-sm text-gray-500 mb-2">
                          <MapPin className="w-4 h-4" />
                          <span>{alert.location_name}</span>
                        </div>
                      )}
                      
                      {alert.tags && alert.tags.length > 0 && (
                        <div className="flex flex-wrap gap-1 mb-2">
                          {alert.tags.map((tag, idx) => (
                            <Badge key={idx} variant="outline" className="text-xs">
                              {tag}
                            </Badge>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <div className="flex flex-col items-end space-y-2">
                    <Badge variant={getSeverityBadgeVariant(alert.severity)}>
                      {getSeverityText(alert.severity)}
                    </Badge>
                    
                    <div className="text-xs text-gray-500 text-right">
                      <div>{getAlertTypeName(alert.alert_type)}</div>
                      <div>{getSourceTypeName(alert.source_type || 'user_report')}</div>
                    </div>
                  </div>
                </div>
              </CardHeader>
              
              <CardContent>
                <div className="flex items-center justify-between text-sm text-gray-500">
                  <div className="flex items-center space-x-4">
                    <div className="flex items-center space-x-1">
                      <Clock className="w-4 h-4" />
                      <span>{alert.created_at ? formatTimeAgo(alert.created_at) : (language === 'en' ? 'Unknown' : 'Kh√¥ng R√µ')}</span>
                    </div>
                    <div className="flex items-center space-x-1">
                      <Eye className="w-4 h-4" />
                      <span>{alert.view_count || 0} {language === 'en' ? 'views' : 'l∆∞·ª£t xem'}</span>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-3">
                    <div className="flex items-center space-x-1">
                      <TrendingUp className="w-4 h-4 text-green-600" />
                      <span>{alert.upvotes || 0}</span>
                    </div>
                    <div className="flex items-center space-x-1">
                      <TrendingUp className="w-4 h-4 text-red-600 rotate-180" />
                      <span>{alert.downvotes || 0}</span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {getFilteredAlerts().length === 0 && (
          <Card>
            <CardContent className="text-center py-8">
              <AlertTriangle className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                {language === 'en' ? 'No Alerts' : 'Kh√¥ng C√≥ C·∫£nh B√°o N√†o'}
              </h3>
              <p className="text-gray-600">
                {language === 'en' 
                  ? 'Currently no alerts match the selected filter.'
                  : 'Hi·ªán t·∫°i kh√¥ng c√≥ c·∫£nh b√°o n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc ƒë√£ ch·ªçn.'
                }
              </p>
            </CardContent>
          </Card>
        )}

        <Card className="bg-blue-50 border-blue-200">
          <CardContent className="p-4">
            <div className="flex items-start space-x-3">
              <AlertTriangle className="w-5 h-5 text-blue-600 mt-0.5" />
              <div>
                <h4 className="font-medium text-blue-800 mb-1">
                  {language === 'en' ? 'Real-time Information' : 'Th√¥ng Tin Realtime'}
                </h4>
                <p className="text-sm text-blue-700">
                  {language === 'en' 
                    ? 'This page updates alerts in real-time. Keep your browser open to receive the latest notifications about threats and fraud from the community and authorities.'
                    : 'Trang n√†y c·∫≠p nh·∫≠t c·∫£nh b√°o theo th·ªùi gian th·ª±c. H√£y ƒë·ªÉ tr√¨nh duy·ªát m·ªü ƒë·ªÉ nh·∫≠n th√¥ng b√°o m·ªõi nh·∫•t v·ªÅ c√°c m·ªëi nguy hi·ªÉm v√† l·ª´a ƒë·∫£o t·ª´ c·ªông ƒë·ªìng v√† c∆° quan ch·ª©c nƒÉng.'
                  }
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default CommunityAlerts;
