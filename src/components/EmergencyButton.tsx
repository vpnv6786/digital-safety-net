
import React, { useState } from 'react';
import { AlertTriangle, Phone, MapPin } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { locationService } from '@/services/locationService';
import { useToast } from '@/hooks/use-toast';

const EmergencyButton = () => {
  const [isActivating, setIsActivating] = useState(false);
  const [countdown, setCountdown] = useState(0);
  const { toast } = useToast();

  const handleEmergencyPress = async () => {
    setIsActivating(true);
    setCountdown(3);

    // 3-second countdown to prevent accidental activation
    const countdownInterval = setInterval(() => {
      setCountdown((prev) => {
        if (prev <= 1) {
          clearInterval(countdownInterval);
          activateEmergency();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
  };

  const cancelEmergency = () => {
    setIsActivating(false);
    setCountdown(0);
    toast({
      title: "ƒê√£ h·ªßy",
      description: "C·∫£nh b√°o kh·∫©n c·∫•p ƒë√£ ƒë∆∞·ª£c h·ªßy",
    });
  };

  const activateEmergency = async () => {
    try {
      const success = await locationService.sendEmergencyAlert();
      
      if (success) {
        toast({
          title: "üö® C·∫£nh b√°o ƒë√£ g·ª≠i!",
          description: "Th√¥ng b√°o kh·∫©n c·∫•p ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn nh·ªØng ng∆∞·ªùi li√™n h·ªá",
          variant: "destructive",
        });
      } else {
        toast({
          title: "L·ªói",
          description: "Kh√¥ng th·ªÉ g·ª≠i c·∫£nh b√°o kh·∫©n c·∫•p. Vui l√≤ng th·ª≠ l·∫°i.",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error('Emergency activation failed:', error);
      toast({
        title: "L·ªói",
        description: "C√≥ l·ªói x·∫£y ra khi g·ª≠i c·∫£nh b√°o",
        variant: "destructive",
      });
    } finally {
      setIsActivating(false);
      setCountdown(0);
    }
  };

  if (isActivating) {
    return (
      <Card className="border-red-500 bg-red-50">
        <CardContent className="p-6 text-center">
          <div className="mb-4">
            <AlertTriangle className="w-16 h-16 text-red-500 mx-auto animate-pulse" />
          </div>
          <h3 className="text-lg font-bold text-red-700 mb-2">
            ƒêang k√≠ch ho·∫°t c·∫£nh b√°o kh·∫©n c·∫•p
          </h3>
          <div className="text-3xl font-bold text-red-600 mb-4">
            {countdown}
          </div>
          <Button 
            onClick={cancelEmergency}
            variant="outline"
            className="w-full"
          >
            H·ª¶Y C·∫¢NH B√ÅO
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="border-red-500">
      <CardContent className="p-6 text-center">
        <div className="mb-4">
          <AlertTriangle className="w-12 h-12 text-red-500 mx-auto" />
        </div>
        <h3 className="text-lg font-bold text-gray-800 mb-2">
          C·∫£nh b√°o kh·∫©n c·∫•p
        </h3>
        <p className="text-sm text-gray-600 mb-4">
          Nh·∫•n ƒë·ªÉ g·ª≠i th√¥ng b√°o kh·∫©n c·∫•p ƒë·∫øn nh·ªØng ng∆∞·ªùi li√™n h·ªá c·ªßa b·∫°n
        </p>
        
        <Button 
          onClick={handleEmergencyPress}
          className="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3"
          size="lg"
        >
          <Phone className="w-5 h-5 mr-2" />
          KH·∫®N C·∫§P
        </Button>
        
        <div className="mt-4 text-xs text-gray-500">
          <MapPin className="w-4 h-4 inline mr-1" />
          V·ªã tr√≠ GPS s·∫Ω ƒë∆∞·ª£c g·ª≠i k√®m
        </div>
      </CardContent>
    </Card>
  );
};

export default EmergencyButton;
